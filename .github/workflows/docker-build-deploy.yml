name: Build and Deploy 04

on:
  push:
    branches:
      - main

jobs:
  build:
    runs-on: ubuntu-latest

    permissions:
      pull-requests: write
      security-events: write

    steps:

        - name: Checkout git repo
          uses: actions/checkout@v3

        - name: Docker meta
          id: docker_meta
          uses: docker/metadata-action@v3
          with:
            images: alvargran/httpenv
            flavor:
              latest=false
            tags: |
              type=raw,value=04
              type=raw,value=latest,enable=${{ github.ref == 'refs/heads/main' }}
              type=ref,event=pr
              type=ref,event=branch
              type=semver,pattern={{version}}

        - name: Set up Docker buildx
          uses: docker/setup-buildx-action@v1 
        
        - name: Set Up QEMU
          uses: docker/setup-qemu-action@v1

        - name: Log in to Docker Hub
          uses: docker/login-action@v3
          with:
            username: ${{ secrets.DOCKER_USERNAME }}
            password: ${{ secrets.DOCKER_PASSWORD }}

        - name: Login to ghcr.io registry
          uses: docker/login-action@v3
          with:
            registry: ghcr.io
            username: ${{ github.actor }}
            password: ${{ secrets.GITHUB_TOKEN }}
        
        - name: Build and Push to GHCR
          uses: docker/build-push-action@v6
          with:
            push: true
            tags: ghcr.io/alvargran/docker-ci-automation:${{ github.run_id }}
            target: test
            cache-from: type=gha
            cache-to: type=gha,mode=max
            platforms: linux/amd64

        - uses: AbsaOSS/k3d-action@v2
          with:
            cluster-name: "test-cluster-1"
            args: >-
              --agents 1
              --no-lb
              --k3s-arg "--no-deploy=traefik,servicelb,metrics-server@server:*"
        
        - name: Smoke test deployment in k3d Kubernetes
          run: |
            kubectl create secret docker-registry regcred \
              --docker-server=https://ghcr.io \
              --docker-username=${{ github.actor }} \
              --docker-password=${{ secrets.GITHUB_TOKEN }}
            export TESTING_IMAGE=ghcr.io/bretfisher/docker-ci-automation:"$GITHUB_RUN_ID"
            envsubst < manifests/deployment.yaml  | kubectl apply -f -
            kubectl rollout status deployment myapp
            kubectl exec deploy/myapp -- curl --fail localhost

        - name: Docker build
          uses: docker/build-push-action@v2
          with:
            push: false
            load: true
            tags:
              # alvargran/httpenv:latest
              # alvargran/httpenv:04
              alvargran/httpenv:${{ github.run_id }}
            labels: ${{ steps.docker_meta.outputs.labels }}
            cache-from: type=gha
            cache-to: type=gha,mode=max
            platforms: linux/amd64

        - name: Unit testing in docker
          run: |
            export TESTING_IMAGE="alvargran/httpenv:${{ github.run_id }}"
            docker compose -f .github/workflows/docker-compose.test.yml up --exit-code-from sut
        - name: Run Trivy for all CVEs (non blocking)
          uses: aquasecurity/trivy-action@master
          with:
            image-ref: alvargran/httpenv:${{ github.run_id }}
            exit-code: 0
            format: table

        - name: Run Trivy for HIGH, CRITICAL CVEs and report (blocking)
          uses: aquasecurity/trivy-action@master
          with:
            image-ref: alvargran/httpenv:${{ github.run_id }}
            exit-code: 1
            ignore-unfixed: true
            vuln-type: 'os,library'
            severity: 'HIGH,CRITICAL'
            format: 'sarif'
            output: 'trivy-results.sarif'

        - name: Upload Trivy scan results to GitHub Security tab
          uses: github/codeql-action/upload-sarif@v3
          if: always()
          with:
            sarif_file: 'trivy-results.sarif'

        - name: Find Comment for image tags
          uses: peter-evans/find-comment@v1
          if: github.event_name == 'pull_request'
          id: fc
          with:
            issue-number: ${{ github.event.pull_request.number }}
            comment-author: 'github-actions[bot]'
            body-includes: Docker image tag(s) pushed

        - name: Create or update comment for image tag
          uses: peter-evans/create-or-update-comment@v1
          if: github.event_name == 'pull_request'
          with:
            comment-id: ${{ steps.fc.outputs.comment-id }}
            issue-number: ${{ github.event.pull_request.number }}
            body: |
              Docker image tag(s) pushed:
              ´´´text
              ${{ steps.docker_meta.outputs.tags }}
              ´´´

              Labels added to images:
              ```text
              ${{ steps.docker_meta.outputs.labels }}
              ```
            edit-mode: replace
